const fs = require('fs');
const path = require('path');

const ICONS_DIR = path.resolve(__dirname, './src/icons');
const SRC_DIR = path.resolve(__dirname, './src/');
const OUTPUT_FILE = path.join(SRC_DIR, 'index.ts');

function toPascalCase(str) {
  return str
    .replace(/(^|[-_])(\w)/g, (_, __, c) => c.toUpperCase())
    .replace(/[-_]/g, '');
}

function generateExportName(file) {
  const name = path.basename(file, path.extname(file));
  return `${toPascalCase(name)}Icon`;
}

function main() {
  const files = fs.readdirSync(ICONS_DIR)
    .filter(file => /\.(tsx?|js)$/.test(file))
    .filter(file => file !== 'index.ts'); // avoid re-importing self

  const exportLines = [];
  const iconNames = [];

  for (const file of files) {
    const nameWithoutExt = path.basename(file, path.extname(file));
    const exportName = generateExportName(file);
    exportLines.push(`export { default as ${exportName} } from './icons/${nameWithoutExt}';`);
    iconNames.push(`'${nameWithoutExt}'`);
  }

  const header = `// Auto-generated by generate-icon-exports.js\n`;
  const typeDef = `\n// prettier-ignore\nexport type IconName = ${iconNames.join(' | ')};\n`;

  fs.writeFileSync(OUTPUT_FILE, header + exportLines.join('\n') + typeDef);
  console.log(`âœ… Wrote ${files.length} exports and type IconName to ${OUTPUT_FILE}`);
}

main();

